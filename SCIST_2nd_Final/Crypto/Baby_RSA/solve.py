from Crypto.Util.number import long_to_bytes, isPrime
from gmpy2 import isqrt

n = 23011183666490618607681464725523758109239020185090401279675798075376628580571829357653414696153411200779073261778574051086208296713001706769282765367974444851768472000686880802434239185461581395120763142316234322376959373898117948774457149863204651018688278917029304888530157473730994603306830735982257794960431849029455028246657610999277012027945943713927438541415405078633416356851157337310687289818654375129475675278945734580815354341458185572300633228085352596908472151978131895689784501160766374905628342747186937957333849656402715748634105362030426311407290630302896978196883118860655723158140860186009200636249
e = 65537
c = 8779237347677810253801158597104914851981431195113616834300020068010824406912812513809117864168640395095638869008952672967438262910822556424188510123872316740683864486933458007777912741144807603614541427145960836357774167138986695970825583672390875273824057339142146116033712986030537390973444795231351681309916537013640949182119733495522998685427873574959241532791681855044909493477963603726132403753174006339473383484270877896069168044633740066069102864633453009538088448603628328321029566349691741687072009875822562380919563383374801311753708029070519201055907815950093577301560278454820239010724613500405647980926

p_test = int(isqrt(n // 31))
for i in range(1000):
    print(i)
    if (n - (p_test ** 2) * 31) % p_test == 0:
        break
    p_test -= 1

p = p_test
l = (n - (p_test ** 2) * 31) // p_test
q = 31 * p + l

assert isPrime(p) and isPrime(q)

d = pow(e, -1, (p - 1) * (q - 1))
m = pow(c, d, n)

print(long_to_bytes(m))